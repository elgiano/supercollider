class:: BelaScope
summary:: Bela's Oscilloscope interface
categories::  UGens>BELA

Description::
note::
This UGen only works on BeLa
::
Allows to scope signals on BeLa's built-in Oscilloscope, which can be accessed from BeLa's web interface.
It is not needed to interact directly with this class, as UGens, Arrays, Busses, Functions and Servers can be scoped via their .belaScope() method. 

subsection:: Setup

Using BelaScope requires:
list::
## an instance of Server running on a Bela (either locally or remotely). 

## ServerOptions.belaMaxScopeChannels should be set > 0 for BeLa's server. 
It represents the maximum number of channels that is possible to scope on that server, and causes bus and resources allocation. 
If set <= 0, the server won't instantiate any Scope object, and any attempt to instantiate a BelaScope from sclang will throw an error.
::

subsection:: Usage
Once a BeLa server is started with options.belaMaxScopeChannels > 0, it is possible to scope UGens and Busses using their .belaScope() methods. See examples below.

classmethods::

method::scope
Send an array of UGen data to Bela's oscilloscope.

argument::channelOffset
Bela's oscilloscope channel to start scoping on. 

argument::signals
Array of UGens to scope

argument::server
Bela's SuperCollider server. If not already present, a new BelaScope instance is created and initialized automatically for this server.

returns:: the array of code::signals:: passed in as an argument. This allows for transparent usage of code::.belaScope():: in processing chains

code::
{ BelaScope.scope(0, SinOsc.ar) }.play;
// same using UGen::belaScope() shortcut method:
{ SinOsc.ar().belaScope(0) }.play

// transparent usage in chains:
// scoping LFNoise0 before and after .range, while still using it to modulate SinOsc
{ SinOsc.ar(LFNoise0.kr(10).belaScope(0).range(20,100).belaScope(1)) }.play
::

method::monitorBus
Scope a Bus on Bela's oscilloscope
argument::channelOffset
Bela's oscilloscope channel to start scoping on. 

argument::busindex
Index of the audio bus to scope

argument::numChannels
Number of bus channels to scope

argument::target
Bela's SuperCollider server, or any node on that server. The bus is monitored strong::after:: this target, or after this server's link::Classes/RootNode:: if a server is provided as target.

code::
// scope 2 channels from audio bus 4 on BeLa Oscilloscope's channel 3
BelaScope.monitorBus(3, 4, 2, ~belaServer)
// same using Server::belaScope() shortcut method:
~belaServer.belaScope(3, 4, 2)
// same using Bus::belaScope() shortcut method
Bus(\audio, 4, 2, ~belaServer).belaScope(3)
::

method::new
It shouldn't be needed to instantiate BelaScope manually, since instantiation is handled automatically when link::#*scope:: or a code::.belaScope():: method is called. Furthermore, only one instance is allowed for each server, so if one is already present, it will be returned without creating a new one.
argument::server
Bela's SuperCollider server, which should be booted with code::options.belaMaxScopeChannels:: > 0, otherwise this method will throw an error.


instancemethods::

method:: scope
See link::#*scope::
argument::channelOffset
Bela's oscilloscope channel to start scoping on. 
argument::busindex
Index of the audio bus to scope
argument::numChannels
Number of bus channels to scope

method:: maxChannels
returns:: Maximum number of oscilloscope channels, as set up by ServerOptions.maxBelaScopeChannels
Examples::

code::
~belaServer = Server.remote(\bela, NetAddr("192.168.6.2", 57110));
~belaServer.options.maxBelaScopeChannels = 8;
~belaServer.reboot;

// UGens: usage like .poll
// scope the LFNoise0, and still use it to modulate a SinOsc
{ var freq = LFNoise0.kr.range(20,2000); SinOsc.ar(freq.belaScope(0)) }.play

// scope an Array of UGens:
{ var freq = LFNoise0.kr.range(20,2000) ! 4; SinOsc.ar(freq.belaScope(0)) }.play

// Bus: scope 3 channels from bus number 10 on BeLa Oscilloscope's channel 4
b = Bus(\audio, 10, 6, ~belaServer);
{ SinOsc.ar }.play(outbus:b);
b.belaScope(4);

// Server: usage like .scope
// scope busses 10 and 11 on BeLa's Oscilloscope channel 2
~belaServer.belaScope(2, 10, 2)
// scope main output busses on BeLa's Oscilloscope channel 0
~belaServer.belaScope

// Function: usage like .scope
// play and scope a multi-output function; scope starting on BelaScope channel 4
{ SinOsc.ar(LFNoise0.ar([1,2,3]).exprange(20,20000)) * LFNoise1.ar([1,2,3]).exprange(0.001, 0.1) }.belaScope(4)
::

